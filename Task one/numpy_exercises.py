# -*- coding: utf-8 -*-
"""copy of Numpy_Exercises.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b92ywabOtTRCRxo-LUJmHbbNojRb1C7U

# NumPy Exercises

Now that we've learned about NumPy let's test your knowledge. We'll start off with a few simple tasks, and then you'll be asked some more complicated questions.

#### Import NumPy as np
"""

import numpy as np

"""#### Create an array of 10 zeros"""

np.zeros(10)

"""#### Create an array of 10 ones"""

np.ones(10)

"""#### Create an array of 10 fives"""

np.array([5,5,5,5,5,5,5,5,5,5])



"""#### Create an array of the integers from 10 to 50"""

np.arange(10,51)

"""#### Create an array of all the even integers from 10 to 50"""

i=8
incbytwo = np.array(range(i+2, i + 44,2))
incbytwo

"""##find the memory size of any array"""

len(incbytwo)

"""#### Create a 3x3 matrix with values ranging from 0 to 8"""

np.arange(9).reshape(3,3)

"""#### Create a 3x3 identity matrix"""

np.eye(3,3)

"""#### Use NumPy to generate a random number between 0 and 1"""

np.random.rand(1)

"""#### Use NumPy to generate an array of 25 random numbers sampled from a standard normal distribution"""

np.random.normal(0,1,25)

"""#### Create the following matrix:"""

np.linspace(0.01, 1, 100)

"""#### Create an array of 20 linearly spaced points between 0 and 1:"""

np.linspace(0, 1, 20)

"""## Numpy Indexing and Selection

Now you will be given a few matrices, and be asked to replicate the resulting matrix outputs:
"""

mat = np.arange(1,26).reshape(5,5)
mat

# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
mat[2:,1:]



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
mat[3,4]



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
np.reshape(mat[:3,1],(3,1))



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
mat[4,:]



# WRITE CODE HERE THAT REPRODUCES THE OUTPUT OF THE CELL BELOW
# BE CAREFUL NOT TO RUN THE CELL BELOW, OTHERWISE YOU WON'T
# BE ABLE TO SEE THE OUTPUT ANY MORE
mat[3:,:]



"""### Now do the following

#### Get the sum of all the values in mat
"""

mat.sum()

"""#### Get the standard deviation of the values in mat"""

mat.std()

"""#### Get the sum of all the columns in mat"""

Mat=[]
Mat.append(mat[:,0].sum())
Mat.append(mat[:,1].sum())
Mat.append(mat[:,2].sum())
Mat.append(mat[:,3].sum())
Mat.append(mat[:,4].sum())
Mat

"""####Create a 10*10  matrix with 1 on the border and 0 inside"""

x= np.zeros(100).reshape(10,10)
x[0,:]=1
x[9,:]=1
x[:,0]=1
x[:,9]=1
x

"""#### find common values between two arrays"""

x1 = np.array([0, 2, 2, 2, 4, 5, 1, 4, 8, 5])
x2 = np.array([2, 2, 3, 4, 7, 4, 6, 9, 4, 8])

retrieve = []
for i in x1:
  if i in x2:
    retrieve.append(i)
retrieve = list(set(retrieve))
np.sort(retrieve)

"""####You can use flatten to flatten your array into a 1D array"""

x = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])

x.flatten()

"""# Great Job!"""